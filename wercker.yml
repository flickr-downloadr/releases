box: floydpink/mono-installbuilder@0.0.4
build:
    steps:
        - script:
            name: publish installers to sourceforge and website
            code: |-
              DEPLOY_READY_BRANCH=$(head -n 1 branch)
              VERSION=`echo $DEPLOY_READY_BRANCH | cut -d'-' -f 2`
              BARE_VERSION=`echo $VERSION | cut -c 2-`
              MERGE_READY_BRANCH="cross-platform"
              REPO="https://github.com/flickr-downloadr/flickr-downloadr.github.io.git"

              echo "1. Push the new installers of ${VERSION} to Sourceforge and set them as default"
              mkdir ${VERSION}
              mkdir installerRepo && cd $_
              git clone $REPO
              cd flickr-downloadr.github.io
              git config credential.helper "store --file=.git/fd-credentials"
              echo "https://${GH_TOKEN}:@github.com" > .git/fd-credentials
              git config push.default tracking
              git checkout $DEPLOY_READY_BRANCH
              PREVIOUS_VERSION=$(head -n 1 build.number)
              cp -r ./installer/* ../../${VERSION}
              cd ../..
              rm -rf ${VERSION}/**/.git* ${VERSION}/**/dependencies
              mkdir ~/.ssh
              echo -ne "$DEPLOY_PRIVATE" > ~/.ssh/id_rsa
              echo -ne "$DEPLOY_PUBLIC" > ~/.ssh/id_rsa.pub
              chmod 600 ~/.ssh/id_rsa
              chmod 644 ~/.ssh/id_rsa.pub
              chmod 700 ~/.ssh
              rm ${VERSION}/linux/flickrdownloadr-${PREVIOUS_VERSION}-linux-installer.run ${VERSION}/linux-x64/flickrdownloadr-${PREVIOUS_VERSION}-0.x86_64.rpm ${VERSION}/linux-x64/flickrdownloadr-${PREVIOUS_VERSION}-linux-x64-installer.run ${VERSION}/linux-x64/flickrdownloadr_${PREVIOUS_VERSION}-0_amd64.deb ${VERSION}/windows/flickrdownloadr-${PREVIOUS_VERSION}-windows-installer.exe
              echo -e "Host frs.sourceforge.net\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
              rsync -e ssh -Ravz ${VERSION}/* flickrdownloadr@frs.sourceforge.net:/home/frs/project/flickr-downloadr/
              curl -H "Accept: application/json" -X PUT -d "default=windows&download_label=Install%20flickr%20downloadr%20(${VERSION})" -d "api_key=${SOURCEFORGE_API_KEY}" https://sourceforge.net/projects/flickr-downloadr/files/${VERSION}/windows/flickrdownloadr-${BARE_VERSION}-windows-installer.exe
              curl -H "Accept: application/json" -X PUT -d "default=mac&download_label=Install%20flickr%20downloadr%20(${VERSION})" -d "api_key=${SOURCEFORGE_API_KEY}" https://sourceforge.net/projects/flickr-downloadr/files/${VERSION}/osx/Install%20flickr%20downloadr.app.dmg
              curl -H "Accept: application/json" -X PUT -d "default=linux&download_label=Install%20flickr%20downloadr%20(${VERSION})" -d "api_key=${SOURCEFORGE_API_KEY}" https://sourceforge.net/projects/flickr-downloadr/files/${VERSION}/linux-x64/flickrdownloadr-${BARE_VERSION}-linux-x64-installer.run

              echo "2. Delete previous installers on fd.github.io/${MERGE_READY_BRANCH}"
              cd installerRepo/flickr-downloadr.github.io
              git checkout $MERGE_READY_BRANCH
              git rm --ignore-unmatch installer/linux/flickrdownloadr-${PREVIOUS_VERSION}-linux-installer.run installer/linux-x64/flickrdownloadr-${PREVIOUS_VERSION}-0.x86_64.rpm installer/linux-x64/flickrdownloadr-${PREVIOUS_VERSION}-linux-x64-installer.run installer/linux-x64/flickrdownloadr_${PREVIOUS_VERSION}-0_amd64.deb installer/osx/Install\ flickr\ downloadr.app.dmg installer/windows/flickrdownloadr-${PREVIOUS_VERSION}-windows-installer.exe

              echo "3. Add current installers to fd.github.io/${MERGE_READY_BRANCH}"
              cp -r ../../${VERSION}/* ./installer
              git add installer/linux/flickrdownloadr-${BARE_VERSION}-linux-installer.run installer/linux-x64/flickrdownloadr-${BARE_VERSION}-0.x86_64.rpm installer/linux-x64/flickrdownloadr-${BARE_VERSION}-linux-x64-installer.run installer/linux-x64/flickrdownloadr_${BARE_VERSION}-0_amd64.deb installer/osx/Install\ flickr\ downloadr.app.dmg installer/windows/flickrdownloadr-${BARE_VERSION}-windows-installer.exe

              echo "4. Update build.number file to the latest version on fd.github.io/${MERGE_READY_BRANCH}"
              echo -n $BARE_VERSION > build.number

              echo "5. Commit and push all changes to GitHub"
              git config --global user.name "The CI Bot"
              git config --global user.email "contact.us@flickrdownloadr.com"
              git commit -asm "Published version ${VERSION} to the website"
              git push origin $MERGE_READY_BRANCH

              echo "6. Delete the deploy branch on GitHub"
              git push origin :$DEPLOY_READY_BRANCH

              echo "7. Just keep the build.number file alone for the output directory"
              cp build.number "${WERCKER_OUTPUT_DIR}/"
